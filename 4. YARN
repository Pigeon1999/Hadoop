YARN 
  - 클러스터의 자원을 요청하고 사용하기 위한 API를 제공한다.
  - 사용자 코드에서 직접 API를 사용할 수 없고, YARN이 내장된 분산 컴퓨팅 프레임워크에서 고수준 API를 작성해야한다.
  - 사용자는 자원 곤리의 자세한 내용을 알 수 없다. 
  - 맵리듀스, 스파크 등과 같은 분산 컴퓨팅 프레임워크는 클러스터 계산 계층(YARN)과 클러스터 저장 계층(HDFS, HBase)위에서 YARN 애플리케이션을 실행한다. 

YARN 애플리케이션 수행
  - YARN은 리소스 매니저와 노드 매니저 등 두 가지 유형의 장기 실행 데몬을 통해 핵심 서비스를 제공한다. 
  - 리소스 매니저 : 클러스터 전체 자원의 사용량 관리 
  - 노드 매니저 : 컨테이너를 구동하고 모니터링하는 역할을 맡는다. 

애플리케이션 구동 과정
  1) 리소스 매니저에 접속하여 애플리케이션 마스터 프로세스 구동을 요청 
  2) 리소스 매니저는 컨테이너에서 애플리케이션 마스터를 시작할 수 있는 노드 매니저를 하나 찾는다. 
  3) 만약 해당 컨테이너에 원하는 애플리케이션 프로세스가 없다면 다른 컨테이너를 구동할 노드 매니저를 찾는다. 
  4) 이하 반복

지원 요청 
  - YARN은 다수의 컨테이너를 요청할 때는 각 컨테이너에 필요한 컴퓨터 자원의 용량뿐만 아니라 해당 요청에 대한 컨테이너의 지역성 제약도 표현할 수 있다. 
  - YARN 애플리케이션은 실행 중에 아무 때나 자원 요청을 할 수 있다. 

애플리케이션의 수명 
  - 애플리케이션마다 몇 초에서 몇달이 걸리는 등. 그 차이가 크다. 
  1) 사용자의 잡 당 하나의 애플리케이션이 실행되는 방식 ex) 맵리듀스
  2) 워크플로나 사용자의 잡 세션당 하나의 애플리케이션이 실행되는 방식 ex) 스파크  
  3) 서로 다른 사용자들이 공유할 수 있는 장기 실행 애플리케이션 ex) 임팔라, 아파치 슬라이더

스케쥴러 옵션 
  - 자원이 제한되어 있고, 클러스터는 매우 바쁘고 어떤 애플리케이션은 요청이 기다릴 때까지 기다려야 하기 때문에 최적의 정책을 짠다. 
  1) FIFO : 이해하기 쉽고 설정이 필요없다. 어떤 애플리케이션이 사용하면 다른 애플리케이션은 끝날 때까지 기다려야 한다. 
  2) 캐퍼시티(가용량) : 애플리케이션을 실행 중이지만, 작은 잡을 제출하는 즉시 분리된 전용 큐에서 처리해준다. 전용 큐는 미리 자원을 예약해둔 것이기 때문에 전체 클러스터 효율성이 떨어진다. 
  3) 페어(균등) : 실행 중인 모든 잡의 자원을 동적으로 분배하기 때문에 미리 자원의 가용량을 예약할 필요가 없다. 두 개의 잡을 동시에 수행하면 자원을 절반씩 할당
  - 지연 스케쥴링 : 요청한 지정 노드에서 컨테이너를 할당받기 위해서 몇초간 지연시키는 기능. 캐퍼시티, 페어 스케쥴러가 지연 스케쥴링 기능을 사용. --> 바로 응답을 할 수 없기 때문에

우성 자원 공평성
