하둡 분산 파일 시스템(HDFS)
  - 네트워크로 연결된 여러 머신의 스토리지를 관리하는 파일 시스템
  - 네트워크 기반이므로 네트워크 프로그램의 복잡성을 모두 가지고 있다. 

  장점
  - 많은 양의 데이터를 저장할 수 있다. 
  - 스트리밍 방식의 데이터 접근 : 전체 데이터셋을 모두 읽는데 걸리는 시간이 적다. 
  - 노드 장애가 발생할 확률이 높은 범용 하드웨어로 구성된 대형 클러스터에서 문제없이 실행되도록 설계되었다.  

  단점
  - 빠른 응답 시간 X 
  - 너무 많은 파일은 메모리 용량을 초과할 수 있다. --> 한 개의 블록, 파일, 디렉터리당 150바이트 메모리가 필요하다.
  - HDFS는 단일 라이터로 파일을 쓴다. 파일 끝에 덧붙이는 건 가능하지만, 임의 위치를 수정하는 것은 불가능하다. 

블록(청크)  
  - 한 번에 읽고 쓸 수 있는 데이터의 최대량 (HDFS는 기본적으로 128MB) 
  - HDFS는 블록 크기보다 작은 데이터일 경우 전체 블록 크기에 해당하는 하위 디스크를 모두 점유하지 않는다. 
  - HDFS의 블록의 크기가 큰 이유는 탐색 비용을 최소화 하기 위해서이다.
  - 블록은 내고장성, 가용성을 제공하는 데 필요한 복제를 구현할 때 매우 적합하다. (각 블록은 각 머신(보통 3개)에 복제된다.)

네임 노드 & 데이터 노드 
  - HDFS 클러스터는 마스터-워커 패턴으로 동작하는 두 종류의 노드로 구성되어 있다. 
  - 네임노드 : 한 개의 마스터 노드. 파일시스템의 네임스페이스 관리, 메타 데이터(네임스페이스 이미지&에디트 로그) 유지 
  - 데이터 노드 : 여러개의 워커 노드. 클라이언트나 네임노드의 요청이 있을때만 블록을 저장, 탐색, 보고 
--> 네임노드를 실행하는 머신이 손상되면 파일시스템의 어떤 파일도 찾을 수 없다. 

* 네임스페이스 이미지 : 노드의 이미지 생성 시간, 실제 노드 정보등을 저장.
* 에디트 로그 : 네임스페이스 이미지가 생성된 이후의 실행과정들을 기록.

  네임노드의 장애 복구 방법 2가지 
    - 백업 :  파일시스템의 메타데이터를 지속적인 상태로 보존하기 위해 파일로 백업한다. 
    - 보조 네임노드 :  주기적으로 네임스페이스 이미지와 에디트 로그를 병합하여 새로운 네임스페이스 이미지를 생성한다. / 네임스페이스 이미지의 복제본 보관(시간차를 두고 복제함)

블록 캐싱 
  - 블록 파일은 '오프힙 블록캐시'라는 데이터노드의 메모리에 명시적으로 캐싱할 수 있다. 
  - 블록은 기본적으로 하나의 데이터노드 메모리에만 캐싱되지만 파일 단위로 설정할 수 있다. 
  - 잡 스케쥴러(맵리듀스, 스파크)는 블록이 캐싱된 데이터노드에서 태스크가 실행되도록 할 수 있어, 읽기 성능을 높일 수 있다. 
  - 사용자나 애플리케이션은 '캐시 풀'에 '캐시 지지자'를 추가하여 특정 파일을 캐싱하도록 명령할 수 있다. 
* 캐시 풀 : 캐시 권한이나 자원의 용도를 관리하는 관리 그룹의 역할을 맡는다. 

HDFS 페러데이션 
  - 네임노드는 파일시스템의 모든 파일과 각 블록에 대한 참조 정보를 메모리에서 관리한다. 
  - 파일이 매우 많은 대형 클러스터에서 확장성에 가장 큰 걸림돌이 되는 것은 바로 메모리다. 
  - 확장성 문제를 해결하기 위해 HDFS 페러데이션을 사용한다. 
  - 각각의 네임노드(클러스터)가 파일시스템의 네임스페이스(블록 풀)를 일부 나누어 관리하는 방식으로 새로운 네임노드를 추가할 수 있다. 
  - 블록 풀의 저장소는 분리되어 있지 않다. 
  - 모든 데이터노드는 클러스터의 각 네임노드마다 등록되어 있고, 여러 블록 풀로부터 블록을 저장한다. 

HDFS 고가용성 
  - 활성대기 상태로 설정된 한 쌍의 네임노드를 구현하여, 활성 네임노드가 장애가 발생하면 대기 네임노드가 그 역할을 대신한다.(수십 초 이내)
  - 활성과 대기 네임노드는 모두 최신 에디트 로그와 실시간으로 갱신되는 블록 매핑 정보를 메모리에 유지하고 있기 때문이다.

장애복구와 펜싱 
  - 대기 네임노드를 활성화시키는 전환 작업은 '장애복구 컨트롤러'라는 새로운 객체로 관리된다. 
  - 장애복구 컨트롤러는 단 하나의 네임노드만 활성 상태에 있는 것을 보장하기 위해 보통 주키퍼로 구현된다. 
  - 우아한 장애복구 : 정기적인 유지관리를 위해 관리자가 수동으로 초기화, 활성 네임노드가 시스템을 손상시키거나 망가뜨리지 않도록 펜싱 메서드 사용. 
