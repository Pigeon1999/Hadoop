맵리듀스(Mapreduce) : 일괄 데이터 처리를 위한 프로그래밍 모델. 병행성을 고려하여 설계되었다. 
  - 하둡의 특성상 소수의 큰 파일이 처리하기 쉽고 효율적이다. 

ex) 유닉스 도구로 데이터 분석한 경우 (연도별 최고 기온 계산 프로그램) --> 42분 / 처리가 오래 걸리기 때문에 병렬처리 해야한다. 
  병렬처리의 문제점 
  - 일을 동일한 크기로 나눈다는 것이 언제나 쉽고 명확한 것이 아니다. -> 파일 크기가 각각 다르기 때문에 일부 프로세스는 일찍 끝날 가능성이 있다. 
  - 독립적인 프로세스의 결과를 모두 합치는 데 더 많은 처리가 필요할 수 있다. 
  - 단일 머신의 처리 능력은 한계가 있다. 
--> 이러한 이슈를 해결하기 위해 하둡과 같은 프레임워크를 사용하는 것이 큰 도움이 된다. 

하둡으로 데이터 분석하기 
  - 맵리듀스 작업은 크게 '맵 단계(입력)'와 '리듀스 단계(출력)'로 구분된다. 각각은 키-값의 쌍을 가지며, 그 타입은 프로그래머가 선택한다. 
  
  맵 단계
  - 맵 단계의 입력은 원본 데이터이다. 원본 데이터를 프로그래머가 원하는 타입으로 변환한다. 
  - 그러면 키는 '각 행이 시작되는 지점까지의 오프셋'이고, 값은 '각 행의 타입을 변환한 원본 데이터'가 된다. 그리고 각 행은 키-값 쌍으로 변환되어 맵 함수의 입력이 된다.  
  - 맵 함수를 수행하여 원하는 키-값쌍을 추출한다. 그리고 데이터들을 키를 기준으로 정렬되고 그룹화 한다. 
  - 정렬되고 그룹화된 키-값이 리듀스 함수의 입력값이 된다. 

  리듀스 단계 
  - 프로그래머가 작성한 리듀스 함수에 입력 값을 넣어 원하는 값을 출력한다. 

분산형으로 확장하기 
  - 하둡은 확장시키면서 분석하는 플랫폼이기에 분산 파일시스템(HDFS)에 저장할 필요가 있다.
  - 하둡은 데이터의 일부분이 저장된 클러스터의 각 머신에서 맵리듀스 프로그램을 실행한다. 이를 위해서 하둡은 YARN이라 불리는 하둡 자원 관리 시스템을 이용한다. 

  1) 맵리듀스 잡
  - 맵리듀스 잡 : 클라이언트가 수행하는 작업의 기본 단위다. 잡은 입력 데이터, 맵리듀스 프로그램, 설정 정보로 구성된다. 

  2) 태스크
  - 잡은 '맵 태스크'와 '리듀스 태스크'로 실행한다. 
  - 각 태스크는 YARN을 이용하여 스케일링되고 클러스터의 여러 노드에서 실행된다. 특정 노드의 태스크 하나가 실패하면 자동으로 다른 노드를 재할당하여 다시 실행된다. 

  3) 스플릿/입력 스플릿
  - 맵리듀스 잡의 입력을 '입력 스플릿'이라고 부르는 고정 크기 조각으로 분리한다. --> 전체 입력을 한번에 처리하는 것보다 스플릿으로 분리된 많은 조각을 처리하는 것이 더 빠르기 때문이다. 
  - 스플릿이 작으면 부하 분산에 더 좋은 효과를 볼 수 있다. 
  - 하지만 너무 작으면 스플릿 관리와 맵 태스크 생성을 위한 오버헤드 때문에 잡의 실행 시간이 증가한다. --> 적정 크기 : HDFS블록의 기본 크기인 128MB

  4) 데이터 지역성 최적화 
  - 데이터 지역성 최적화 : HDFS 내의 입력 데이터가 있는 노드에서 맵 태스크를 실행할 때 가장 빠르게 작동한다. 
  - 만약 데이터 지역성을 위한 가용 슬롯이 없다면 저장된 동일 랙에서 다른 노드에서 가용한 맵 슬롯을 찾는다. 
  - 만약 동일 랙에 공간에 없다면 외부 랙의 노드에서 찾는다. --> 랙간의 네트워크 전송이 일어남 

  5) 리듀스 태스크 
  - 잡이 끝나면 맵 태스크의 결과는 필요없기 때문에 HDFS가 아닌 로컬 디스크에 저장된다. 
  - 모든 맵 태스크는 하나의 리듀스 태스크와 연결되어 있다. --> 데이터 지역성의 장점이 없다. 
  - 리듀스 출력에 대한 HDFS 블록의 첫번째 복제본은 로컬 노드에 저장되고, 나머지 복제본은 외부 랙에 저장된다. 

  6) 데이터 흐름 
  - 단일 리듀스 태스크의 맵리듀스 데이터 흐름 
  - 다수의 리듀스 태스크가 있는 맵리듀스 데이터 흐름 : 맵 태스크는 리듀스 수만큼 파티션을 생성하고 각각의 파티션(리듀스)에 분배한다 
  - 리듀스 태스크가 없는 맵리듀스 데이터 흐름 : 모든 처리 과정을 완전히 병렬로 처리하는 경우에 적합하다. 각각 맵 태스크가 결과를 HDFS에 저장한다. 

ex) 하둡의 맵리듀스로 데이터 분석한 경우 --> 6분 

